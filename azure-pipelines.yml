# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

parameters:
  - name: ResourceGroup
    default: "rg-vmss-test"

  - name: GalleryName
    default: "gallery"

  - name: ImageDefinition
    default: "nginx-vm"

  - name: StorageAccount
    default: "myImageStore"

  - name: ImageVersion
    default: "1.0.1"

steps:

- task: NodeTool@0
  displayName: "Install matching Node version"
  inputs:
    versionSpec: '10.x'

- task: Npm@1
  displayName: "Install software dependencies"
  inputs:
    command: 'install'
    workingDir: 'NodejsWebApp1'

- task: gulp@0
  displayName: "Invoke gulpfile.js"
  inputs:
    gulpFile: 'NodejsWebApp1/gulpfile.js'
    targets: 
    gulpjs: 'node_modules/gulp/bin/gulp.js'
    enableCodeCoverage: false

- task: Npm@1
  displayName: "Run automated tests"
  inputs:
    command: 'custom'
    workingDir: 'NodejsWebApp1'
    customCommand: 'test'

- task: PackerBuild@1
  displayName: "Bake immutable image for VMSS"
  inputs:
    templateType: 'builtin'
    ConnectedServiceName: 'devops-test'
    isManagedImage: false
    location: 'westeurope'
    storageAccountName: '${{ parameters.StorageAccount }}'
    azureResourceGroup: '${{ parameters.ResourceGroup }}'
    baseImageSource: 'default'
    baseImage: 'Canonical:UbuntuServer:18.04-LTS:linux'
    packagePath: '$(System.DefaultWorkingDirectory)/NodejsWebApp1'
    deployScriptPath: 'Deploy/ubuntu/deployNodejsApp.sh'
    imageUri: 'bakedImageUrl'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'devops-test'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az sig image-version create \
      --resource-group ${{ parameters.ResourceGroup }} \
      --gallery-name ${{ parameters.GalleryName }}  \
      --gallery-image-definition ${{ parameters.ImageDefinition }} \
      --gallery-image-version ${{ parameters.ImageVersion }} \
      --target-regions "westeurope" \
      --managed-image "$(bakedImageUrl)"
    failOnStandardError: true